configfile: 'envs/config.yaml'

# either embedded or original peptides
peptides = []
for line in open(config['peptides'], 'r'):
    pep = line.strip()
    peptides.append(pep)

num_pep = sum(1 for line in open(config['peptides']))
if config['instance_start_size'] == 'all':
    instances = [num_pep]
else:
    instances = config['instance_start_size']
    while instances[-1] < num_pep:
        instances.append(instances[-1] * 2)
    instances[-1] = num_pep


rule all:
    input:
        expand(config['output_dir'] + '/ilp/lp_out/{pep_count}_vaccine_ilp_{approach}.{ext}', pep_count=instances, approach=config['approach'], ext=['sol', 'lp', 'json']),
        expand(config['output_dir'] + '/ilp/pep_out/{pep_count}_vaccine_sequence_' + config['approach'] + '.txt', pep_count=instances),
        expand(config['output_dir'] + '/ilp/pep_out/{pep_count}_chosen_peptides_' + config['approach'] + '_inc_substrings.txt', pep_count=instances),
        expand(config['output_dir'] + '/ilp/lp_out/{pep_count}_vaccine_ilp_concat.{ext}', pep_count=instances, ext=['sol', 'lp', 'json']),
        expand(config['output_dir'] + '/ilp/pep_out/{pep_count}_concat_vaccine_sequence.txt', pep_count=instances)


rule create_overlap_graph:
    input:
        peptides = config['peptides']
    output:
        config['output_dir'] + '/graph/{pep_count}_og.gpickle'
    params:
        pep = peptides
    conda:
        'envs/graph.yaml'
    script:
        'scripts/networkx_basic_graph.py'


rule create_aho_corasick:
    input:
        peptides = config['peptides']
    output:
        config['output_dir'] + '/graph/{pep_count}_aho_corasick.gpickle',
        config['output_dir'] + '/graph/{pep_count}_ac_leaves.gpickle'
    params:
        pep = peptides,
        path = config['output_dir'] + '/graph/',
        log = config['logging']
    conda:
        'envs/graph.yaml'
    script:
        'scripts/aho_corasick_trie.py'


rule create_hog:
    input:
        ac = config['output_dir'] + '/graph/{pep_count}_aho_corasick.gpickle',
        leaves = config['output_dir'] + '/graph/{pep_count}_ac_leaves.gpickle'
    output:
        config['output_dir'] + '/graph/{pep_count}_hog.gpickle'
    params:
        pep = peptides,
        path = config['output_dir'] + '/graph/',
        log = config['logging']
    conda:
        'envs/graph.yaml'
    script:
        'scripts/linear_time_hog.py'

# input parameters for rule modify_ba_predictions_for_substrings
def define_param():
    if config['unembedded']:
        pep = []
        for line in open(config['unembedded'], 'r'):
            p = line.strip()
            pep.append(p)
        return pep
    else:
        return peptides


rule modify_ba_predictions_for_substrings:
    input:
        ba_predictions = config['binding_affinities']
    output:
        config['output_dir'] + '/data/substr_modified_ba_prediction_data.pkl.gz'
    params:
        pep = define_param()
    conda:
        'envs/ilp.yaml'
    script:
        'scripts/filter_substrings_in_ba_predictions.py'


rule set_index_in_ba_predictions:
    input:
        embedded_epitope_features = config['embedded_epitope_features'],
        ba_predictions = config['output_dir'] + '/data/substr_modified_ba_prediction_data.pkl.gz'
    output:
        config['output_dir'] + '/data/embedded_substr_modified_ba_prediction_data.pkl.gz'
    params:
        pep = peptides
    conda:
        'envs/ilp.yaml'
    script:
        'scripts/binding_affinities_for_embedded_peptide.py'


def define_input_ba(wildcards):
    if config['unembedded']:
        return config['output_dir'] + '/data/embedded_substr_modified_ba_prediction_data.pkl.gz'
    else:
        return config['output_dir'] + '/data/substr_modified_ba_prediction_data.pkl.gz'


rule solve_hog_ilp:
    input:
        hog = config['output_dir'] + '/graph/{pep_count}_hog.gpickle',
        leaves = config['output_dir'] + '/graph/{pep_count}_ac_leaves.gpickle',
        frequency_data = config['frequency_data'],
        binding_affinity_data = define_input_ba
    output:
        expand(config['output_dir'] + '/ilp/lp_out/{{pep_count}}_vaccine_ilp_hog.{ext}', ext=['sol', 'lp', 'json']),
        config['output_dir'] + '/ilp/pep_out/{pep_count}_chosen_peptides_hog.txt'
    params:
        k = config['k'],
        min_hits = config['min_hits'],
        type = config['output_dir'],
        approach = config['approach'],
        binding_affinity_threshold = config['ba_threshold'],
        population = config['population'],
        pep = peptides,
        path = config['output_dir'] + '/ilp/'
    conda:
        'envs/ilp.yaml'
    script:
        'scripts/vaccine_data.py'


rule solve_og_ilp:
    input:
        overlap_graph = config['output_dir'] + '/graph/{pep_count}_og.gpickle',
        frequency_data = config['frequency_data'],
        binding_affinity_data = define_input_ba
    output:
        expand(config['output_dir'] + '/ilp/lp_out/{{pep_count}}_vaccine_ilp_og.{ext}', ext=['sol', 'lp', 'json']),
        config['output_dir'] + '/ilp/pep_out/{pep_count}_chosen_peptides_og.txt'
    params:
        k = config['k'],
        min_hits = config['min_hits'],
        type = config['output_dir'],
        approach = config['approach'],
        binding_affinity_threshold = config['ba_threshold'],
        population = config['population'],
        pep = peptides,
        path = config['output_dir'] + '/ilp/'
    conda:
        'envs/ilp.yaml'
    script:
        'scripts/vaccine_data.py'


# uses unembedded peptides
rule solve_concat_ilp:
    input:
        frequency_data = config['frequency_data'],
        binding_affinity_data = config['binding_affinities']
    output:
        expand(config['output_dir'] + '/ilp/lp_out/{{pep_count}}_vaccine_ilp_concat.{ext}', ext=['sol', 'lp', 'json']),
        config['output_dir'] + '/ilp/pep_out/{pep_count}_chosen_peptides_concat.txt'
    params:
        k = config['k'],
        min_hits = config['min_hits'],
        type = config['output_dir'],
        approach = 'concat',
        binding_affinity_threshold = config['ba_threshold'],
        population = config['population'],
        pep = define_param(),
        path = config['output_dir'] + '/ilp/'
    conda:
        'envs/ilp.yaml'
    script:
        'scripts/vaccine_data.py'


rule create_vaccine:
    input:
        sol = config['output_dir'] + '/ilp/lp_out/{pep_count}_vaccine_ilp_hog.sol',
        hog = config['output_dir'] + '/graph/{pep_count}_hog.gpickle',
        peptides = config['output_dir'] + '/ilp/pep_out/{pep_count}_chosen_peptides_hog.txt'
    output:
        config['output_dir'] + '/ilp/pep_out/{pep_count}_vaccine_sequence_hog.txt'
    conda:
        'envs/graph.yaml'
    script:
        'scripts/create_vac_seq_from_sol.py'


rule create_vaccine_og:
    input:
        sol = config['output_dir'] + '/ilp/lp_out/{pep_count}_vaccine_ilp_og.sol',
        og = config['output_dir'] + '/graph/{pep_count}_og.gpickle',
        peptides = config['output_dir'] + '/ilp/pep_out/{pep_count}_chosen_peptides_og.txt'
    output:
        config['output_dir'] + '/ilp/pep_out/{pep_count}_vaccine_sequence_og.txt'
    conda:
        'envs/graph.yaml'
    script:
        'scripts/create_vac_from_og_sol.py'


def define_input_params():
    if config['embedding_length']:
        pep = define_param()
        return {'pep': pep, 'embed_len': config['embedding_length']}
    else:
        return {'pep': peptides, 'embed_len': None}

# need to get unembedded peptides back again
rule get_all_sub_peptides:
    input:
        chosen_peptides = config['output_dir'] + '/ilp/pep_out/{pep_count}_chosen_peptides_{approach}.txt'
    output:
        config['output_dir'] + '/ilp/pep_out/{pep_count}_chosen_peptides_{approach}_inc_substrings.txt'
    params:
        **define_input_params()
    script:
        'scripts/get_all_peptides_incl_substrings.py'


rule create_concat_vaccine:
    input:
        config['output_dir'] + '/ilp/pep_out/{pep_count}_chosen_peptides_concat.txt'
    output:
        config['output_dir'] + '/ilp/pep_out/{pep_count}_concat_vaccine_sequence.txt'
    params:
        name = config['output_dir']
    run:
        peptides = []
        for line in open(input[0], 'r'):
            if line.startswith('#'):
                continue
            pep = line.strip()
            peptides.append(pep)
        seq = ''.join(peptides)
        with open(output[0], 'w') as out:
            out.write(params.name + ' concatenated peptides from basic approach\n')
            out.write(seq)
